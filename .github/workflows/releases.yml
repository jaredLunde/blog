name: releases

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  install:
    name: üèóÔ∏è Install
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !startsWith(github.event.head_commit.message, 'chore:') && !startsWith(github.event.head_commit.message, 'style:') && !contains(github.event.pull_request.title, '[skip ci]') && !startsWith(github.event.pull_request.title, 'chore:') && !startsWith(github.event.pull_request.title, 'style:') && !startsWith(github.event.head_commit.message, 'chore(') && !startsWith(github.event.head_commit.message, 'style(') && !startsWith(github.event.pull_request.title, 'chore(') && !startsWith(github.event.pull_request.title, 'style(')"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --reporter=silent

  check-types:
    name: '‚úÖ Check types'
    if: "!startsWith(github.event.head_commit.message, 'docs:') && !contains(github.event.pull_request.title, 'docs:') && !startsWith(github.event.head_commit.message, 'docs(') && !contains(github.event.pull_request.title, 'docs(')"
    needs: install
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Load node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Check types
        run: yarn check-types
      - name: Pull origin
        if: ${{ github.event_name == 'push' }}
        run: git pull --no-rebase
      - name: Commit TypeScript manifest
        if: ${{ github.event_name == 'push' }}
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          file_pattern: tsconfig.tsbuildinfo
          commit_message: 'chore: update incremental type checking manifest'

  lint:
    name: 'üßπ Lint'
    if: "!startsWith(github.event.head_commit.message, 'docs:') && !contains(github.event.pull_request.title, 'docs:') && !startsWith(github.event.head_commit.message, 'docs(') && !contains(github.event.pull_request.title, 'docs(')"
    needs: install
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Load node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Lint
        run: yarn lint --quiet

  run-tests:
    name: 'üß™ Tests / ${{ matrix.jobs_index }}'
    if: "!startsWith(github.event.head_commit.message, 'docs:') && !contains(github.event.pull_request.title, 'docs:') && !startsWith(github.event.head_commit.message, 'docs(') && !contains(github.event.pull_request.title, 'docs(')"
    runs-on: ubuntu-latest
    needs: install
    strategy:
      # When one test job fails, DO NOT cancel the other containers
      fail-fast: false
      matrix:
        node-version: [16.x]
        # Runs in X jobs
        jobs_total: [1] # [2]
        jobs_index: [0] # [0, 1]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Load node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Test
        env:
          JEST_SUITE_NAME: 'Tests / ${{ matrix.jobs_index }}'
          JEST_JUNIT_OUTPUT_NAME: junit.${{ matrix.jobs_index }}.xml
          JEST_JUNIT_OUTPUT_DIR: .test-results
          JEST_JUNIT_ADD_FILE_ATTRIBUTE: 'true'
        run: yarn test --coverage --silent --maxWorkers=1 --jobsIndex=${{ matrix.jobs_index }} --jobsTotal=${{ matrix.jobs_total }} --reporters=jest-junit
      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: .test-results/junit.${{ matrix.jobs_index }}.xml
      - name: Upload test coverage
        uses: actions/upload-artifact@v2
        with:
          name: test-coverage
          path: .jest/coverage

  publish-tests:
    name: üì§ Publish test results
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download test results
        uses: actions/download-artifact@v2
        with:
          name: test-results
          path: .jest/results
      - name: Merge test results
        run: npx junit-report-merger .jest/test-results.xml ".jest/results/junit.*.xml"
      - name: Publish test results
        uses: dorny/test-reporter@v1
        with:
          name: üì• Test results
          token: ${{ secrets.GITHUB_TOKEN }}
          reporter: jest-junit
          path: .jest/test-results.xml
          list-suites: 'all'
          list-tests: 'all'
          max-annotations: '50'
          fail-on-error: 'true'
      - name: Pull origin
        if: ${{ github.event_name == 'push' }}
        run: git pull --no-rebase
      - name: Commit test results
        if: ${{ github.event_name == 'push' }}
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          file_pattern: .jest/test-results.xml
          commit_message: 'chore: update test results'

  deploy-preview:
    name: üñºÔ∏è Deploy Preview
    # Don't run deployments for test-only commits/PRs
    if: "github.event_name == 'pull_request' && !startsWith(github.event.head_commit.message, 'test:') && !startsWith(github.event.pull_request.title, 'test:') && !startsWith(github.event.head_commit.message, 'test(') && !startsWith(github.event.pull_request.title, 'test(') && !contains(github.event.head_commit.message, '[skip ci]') && !startsWith(github.event.head_commit.message, 'docs:') && !startsWith(github.event.head_commit.message, 'chore:') && !startsWith(github.event.head_commit.message, 'style:') && !contains(github.event.pull_request.title, '[skip ci]') && !startsWith(github.event.pull_request.title, 'docs:') && !startsWith(github.event.pull_request.title, 'chore:') && !startsWith(github.event.pull_request.title, 'style:') && !startsWith(github.event.head_commit.message, 'docs(') && !startsWith(github.event.head_commit.message, 'chore(') && !startsWith(github.event.head_commit.message, 'style(') && !startsWith(github.event.pull_request.title, 'docs(') && !startsWith(github.event.pull_request.title, 'chore(') && !startsWith(github.event.pull_request.title, 'style(')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Deploy
        uses: amondnet/vercel-action@v20
        with:
          # see: https://github.com/marketplace/actions/vercel-action#inputs
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID}}
          vercel-project-id: ${{ secrets.PROJECT_ID}}

  deploy-production:
    name: üöÄ Deploy to Production
    # Don't run deployments for test-only commits/PRs
    if: "github.event_name == 'push' && !startsWith(github.event.head_commit.message, 'test:') && !startsWith(github.event.pull_request.title, 'test:') && !startsWith(github.event.head_commit.message, 'test(') && !startsWith(github.event.pull_request.title, 'test(')"
    runs-on: ubuntu-latest
    needs: [check-types, lint, run-tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Deploy
        uses: amondnet/vercel-action@v20
        with:
          # see: https://github.com/marketplace/actions/vercel-action#inputs
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID}}
          vercel-project-id: ${{ secrets.PROJECT_ID}}
          vercel-args: '--prod'
      - name: Pull origin
        if: ${{ github.event_name == 'push' }}
        run: git pull --no-rebase
      - name: Generate release notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  deploy-docs:
    name: Deploy Documentation
    # Don't run deployments for test-only commits/PRs
    if: "github.event_name == 'push' && !startsWith(github.event.head_commit.message, 'test:') && !startsWith(github.event.pull_request.title, 'test:') && !startsWith(github.event.head_commit.message, 'test(') && !startsWith(github.event.pull_request.title, 'test(')"
    runs-on: ubuntu-latest
    needs: install
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Load node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Create the docs directory locally in CI
        run: yarn typedoc --out .docs {components,gql,hooks,server,stores,styles,types,utils}/**
      - name: Deploy Docs
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          branch: gh-pages
          folder: .docs
